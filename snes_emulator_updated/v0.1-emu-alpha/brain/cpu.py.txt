from .opcodes import *  # Importiert alle Opcode-Funktionen aus opcodes.py

class CPU:
    def __init__(self, memory, ppu, apu):
        self.memory = memory
        self.ppu = ppu
        self.apu = apu

        # Registers
        self.a = 0  # Akkumulator
        self.x = 0  # X-Register
        self.y = 0  # Y-Register
        self.s = 0xFF  # Stack-Pointer
        self.pc = 0x8000  # Programmzähler
        self.pb = 0  # Program Bank Register
        self.db = 0  # Data Bank Register
        self.d = 0  # Direct Page Register

        # Statusregister (P)
        self.p = 0x24  # Initialwert: Interrupt Disable, Break Flag gesetzt

        # Flags im Statusregister
        self.c_flag = 0  # Carry Flag
        self.z_flag = 0  # Zero Flag
        self.i_flag = 1  # Interrupt Disable Flag
        self.d_flag = 0  # Decimal Mode Flag
        self.b_flag = 1  # Break Flag
        self.v_flag = 0  # Overflow Flag
        self.n_flag = 0  # Negative Flag

        self.cycles = 0  # Zyklenzähler
        self.controller_state = {}  # Dictionary für Controller-Status
        self.emulation_mode = False  # False: native mode, True: emulation mode
        self.waiting = False  # True, wenn WAI ausgeführt wurde

    def set_controller_state(self, state):
        self.controller_state = state

    # Hilfsfunktionen für Statusregister-Flags
    def set_flag(self, flag, value):
        if value:
            self.p |= flag
        else:
            self.p &= ~flag

    def get_flag(self, flag):
        return self.p & flag != 0

    def set_zn_flags(self, value):
        self.set_flag(0x02, value == 0)  # Zero Flag
        self.set_flag(0x80, value & 0x80 != 0)  # Negative Flag

    # Stack-Operationen
    def push_stack(self, value):
        self.memory[0x100 + self.s] = value
        self.s -= 1

    def pop_stack(self):
        self.s += 1
        return self.memory[0x100 + self.s]

    # Adressierungsmodi
    # ... (immediate, zero_page, zero_page_x, zero_page_y, absolute, absolute_x, absolute_y, indirect_x, indirect_y, relative)

    # Opcode-Ausführung
    def execute_instruction(self):
        opcode = self.memory[self.pc]
        self.pc += 1

        # Opcode-Funktionen aufrufen
        opcode_function = getattr(self, opcode_names[opcode], None)
        if opcode_function:
            opcode_function()
        else:
            # Fehlerbehandlung für nicht implementierte Opcodes
            print(f"Error: Unimplemented opcode {hex(opcode)} at PC {hex(self.pc - 1)}")
            self.pc = (self.memory[0xFFFA] << 8) | self.memory[0xFFFB]  # Springe zum NMI-Vektor

        # Zyklen zählen und Interrupts prüfen
        self.cycles += instruction_cycles[opcode]
        self.check_interrupts()

    # Interrupt-Handling
    def check_interrupts(self):
        if not self.i_flag and self.ppu.nmi_pending:
            self.push_stack(self.pc >> 8)
            self.push_stack(self.pc & 0xFF)
            self.push_stack(self.p)
            self.i_flag = 1
            self.pc = (self.memory[0xFFFA] << 8) | self.memory[0xFFFB]
            self.ppu.nmi_pending = False
        elif not self.i_flag and self.apu.irq_pending:
            # ... (ähnlich wie NMI, aber mit anderer Adresse)

    # DMA-Transfer (vereinfacht)
    def dma_transfer(self, channel, address, length):
        for i in range(length):
            self.memory[address + i] = self.memory[0x4300 + channel * 0x100 + i]
