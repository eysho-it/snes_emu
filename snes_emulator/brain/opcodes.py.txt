from .cpu import CPU

# --- LDA (Load Accumulator) ---

def lda_immediate(self):
    value = self.memory[self.immediate()]
    self.a = value
    self.set_zn_flags(self.a)

def lda_zero_page(self):
    address = self.zero_page()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_zero_page_x(self):
    address = self.zero_page_x()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_absolute(self):
    address = self.absolute()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_absolute_x(self):
    address = self.absolute_x()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_absolute_y(self):
    address = self.absolute_y()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_indirect_x(self):
    address = self.indirect_x()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

def lda_indirect_y(self):
    address = self.indirect_y()
    self.a = self.memory[address]
    self.set_zn_flags(self.a)

# --- LDX (Load X Register) ---

def ldx_immediate(self):
    self.x = self.memory[self.immediate()]
    self.set_zn_flags(self.x)

def ldx_zero_page(self):
    address = self.zero_page()
    self.x = self.memory[address]
    self.set_zn_flags(self.x)

def ldx_zero_page_y(self):
    address = self.zero_page_y()
    self.x = self.memory[address]
    self.set_zn_flags(self.x)

def ldx_absolute(self):
    address = self.absolute()
    self.x = self.memory[address]
    self.set_zn_flags(self.x)

def ldx_absolute_y(self):
    address = self.absolute_y()
    self.x = self.memory[address]
    self.set_zn_flags(self.x)

# --- LDY (Load Y Register) ---

def ldy_immediate(self):
    self.y = self.memory[self.immediate()]
    self.set_zn_flags(self.y)

def ldy_zero_page(self):
    address = self.zero_page()
    self.y = self.memory[address]
    self.set_zn_flags(self.y)

def ldy_zero_page_x(self):
    address = self.zero_page_x()
    self.y = self.memory[address]
    self.set_zn_flags(self.y)

def ldy_absolute(self):
    address = self.absolute()
    self.y = self.memory[address]
    self.set_zn_flags(self.y)

def ldy_absolute_x(self):
    address = self.absolute_x()
    self.y = self.memory[address]
    self.set_zn_flags(self.y)

# Inject the functions into the CPU class
CPU.lda_immediate = lda_immediate
CPU.lda_zero_page = lda_zero_page
CPU.lda_zero_page_x = lda_zero_page_x
CPU.lda_absolute = lda_absolute
CPU.lda_absolute_x = lda_absolute_x
CPU.lda_absolute_y = lda_absolute_y
CPU.lda_indirect_x = lda_indirect_x
CPU.lda_indirect_y = lda_indirect_y

CPU.ldx_immediate = ldx_immediate
CPU.ldx_zero_page = ldx_zero_page
CPU.ldx_zero_page_y = ldx_zero_page_y
CPU.ldx_absolute = ldx_absolute
CPU.ldx_absolute_y = ldx_absolute_y

CPU.ldy_immediate = ldy_immediate
CPU.ldy_zero_page = ldy_zero_page
CPU.ldy_zero_page_x = ldy_zero_page_x
CPU.ldy_absolute = ldy_absolute
CPU.ldy_absolute_x = ldy_absolute_x
# --- STA (Store Accumulator) ---

def sta_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.a

def sta_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = self.a

def sta_absolute(self):
    address = self.absolute()
    self.memory[address] = self.a

def sta_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = self.a

def sta_absolute_y(self):
    address = self.absolute_y()
    self.memory[address] = self.a

def sta_indirect_x(self):
    address = self.indirect_x()
    self.memory[address] = self.a

def sta_indirect_y(self):
    address = self.indirect_y()
    self.memory[address] = self.a

# --- STX (Store X Register) ---

def stx_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.x

def stx_zero_page_y(self):
    address = self.zero_page_y()
    self.memory[address] = self.x

def stx_absolute(self):
    address = self.absolute()
    self.memory[address] = self.x

# --- STY (Store Y Register) ---

def sty_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.y

def sty_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = self.y

def sty_absolute(self):
    address = self.absolute()
    self.memory[address] = self.y

# --- STZ (Store Zero) ---

def stz_zero_page(self):
    address = self.zero_page()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_absolute(self):
    address = self.absolute()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class as in Part 1)
# ... (LDA, LDX, LDY Opcodes aus Teil 1)

# --- STA (Store Accumulator) ---

def sta_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.a

def sta_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = self.a

def sta_absolute(self):
    address = self.absolute()
    self.memory[address] = self.a

def sta_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = self.a

def sta_absolute_y(self):
    address = self.absolute_y()
    self.memory[address] = self.a

def sta_indirect_x(self):
    address = self.indirect_x()
    self.memory[address] = self.a

def sta_indirect_y(self):
    address = self.indirect_y()
    self.memory[address] = self.a

# --- STX (Store X Register) ---

def stx_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.x

def stx_zero_page_y(self):
    address = self.zero_page_y()
    self.memory[address] = self.x

def stx_absolute(self):
    address = self.absolute()
    self.memory[address] = self.x

# --- STY (Store Y Register) ---

def sty_zero_page(self):
    address = self.zero_page()
    self.memory[address] = self.y

def sty_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = self.y

def sty_absolute(self):
    address = self.absolute()
    self.memory[address] = self.y

# --- STZ (Store Zero) ---

def stz_zero_page(self):
    address = self.zero_page()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_absolute(self):
    address = self.absolute()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

def stz_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = 0
    self.set_zn_flags(0)  # Z-Flag setzen

# Inject the functions into the CPU class
CPU.sta_zero_page = sta_zero_page
CPU.sta_zero_page_x = sta_zero_page_x
CPU.sta_absolute = sta_absolute
CPU.sta_absolute_x = sta_absolute_x
CPU.sta_absolute_y = sta_absolute_y
CPU.sta_indirect_x = sta_indirect_x
CPU.sta_indirect_y = sta_indirect_y

CPU.stx_zero_page = stx_zero_page
CPU.stx_zero_page_y = stx_zero_page_y
CPU.stx_absolute = stx_absolute

CPU.sty_zero_page = sty_zero_page
CPU.sty_zero_page_x = sty_zero_page_x
CPU.sty_absolute = sty_absolute

CPU.stz_zero_page = stz_zero_page
CPU.stz_zero_page_x = stz_zero_page_x
CPU.stz_absolute = stz_absolute
CPU.stz_absolute_x = stz_absolute_x
# ... (LDA, LDX, LDY, STA, STX, STY, STZ Opcodes aus Teil 1, 2, und 3)

# --- ADC (Add with Carry) ---

def adc_immediate(self):
    value = self.memory[self.immediate()]
    result = self.a + value + self.c_flag
    self.a = result & 0xFF
    self.set_flag(0x01, result > 0xFF)  # Carry Flag
    self.set_flag(0x40, ((self.a ^ value) & 0x80 == 0) and ((self.a ^ result) & 0x80 != 0))  # Overflow Flag
    self.set_zn_flags(self.a)

def adc_zero_page(self):
    address = self.zero_page()
    self.adc(address)

def adc_zero_page_x(self):
    address = self.zero_page_x()
    self.adc(address)

def adc_absolute(self):
    address = self.absolute()
    self.adc(address)

def adc_absolute_x(self):
    address = self.absolute_x()
    self.adc(address)

def adc_absolute_y(self):
    address = self.absolute_y()
    self.adc(address)

def adc_indirect_x(self):
    address = self.indirect_x()
    self.adc(address)

def adc_indirect_y(self):
    address = self.indirect_y()
    self.adc(address)

# --- SBC (Subtract with Carry) ---

def sbc_immediate(self):
    value = self.memory[self.immediate()] ^ 0xFF  # Komplement f√ºr Subtraktion
    self.sbc(value)

def sbc_zero_page(self):
    address = self.zero_page()
    self.sbc(self.memory[address])

def sbc_zero_page_x(self):
    address = self.zero_page_x()
    self.sbc(self.memory[address])

def sbc_absolute(self):
    address = self.absolute()
    self.sbc(self.memory[address])

def sbc_absolute_x(self):
    address = self.absolute_x()
    self.sbc(self.memory[address])

def sbc_absolute_y(self):
    address = self.absolute_y()
    self.sbc(self.memory[address])

def sbc_indirect_x(self):
    address = self.indirect_x()
    self.sbc(self.memory[address])

def sbc_indirect_y(self):
    address = self.indirect_y()
    self.sbc(self.memory[address])

# --- AND (Logical AND) ---

def and_immediate(self):
    self.a &= self.memory[self.immediate()]
    self.set_zn_flags(self.a)

def and_zero_page(self):
    address = self.zero_page()
    self.and_value(self.memory[address])

# ... (AND zero page,X, absolute, absolute,X, absolute,Y, indirect,X, indirect,Y)

# --- ORA (Logical Inclusive OR) ---

def ora_immediate(self):
    self.a |= self.memory[self.immediate()]
    self.set_zn_flags(self.a)

def ora_zero_page(self):
    address = self.zero_page()
    self.ora_value(self.memory[address])

# ... (ORA zero page,X, absolute, absolute,X, absolute,Y, indirect,X, indirect,Y)

# --- EOR (Exclusive OR) ---

def eor_immediate(self):
    self.a ^= self.memory[self.immediate()]
    self.set_zn_flags(self.a)

def eor_zero_page(self):
    address = self.zero_page()
    self.eor_value(self.memory[address])

# ... (EOR zero page,X, absolute, absolute,X, absolute,Y, indirect,X, indirect,Y)

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-4)

# --- Branch-Befehle ---

def bpl(self):  # Branch if Positive
    if not self.n_flag:
        self.pc = self.relative()

def bmi(self):  # Branch if Minus
    if self.n_flag:
        self.pc = self.relative()

def bvc(self):  # Branch if Overflow Clear
    if not self.v_flag:
        self.pc = self.relative()

def bvs(self):  # Branch if Overflow Set
    if self.v_flag:
        self.pc = self.relative()

def bcc(self):  # Branch if Carry Clear
    if not self.c_flag:
        self.pc = self.relative()

def bcs(self):  # Branch if Carry Set
    if self.c_flag:
        self.pc = self.relative()

def bne(self):  # Branch if Not Equal
    if not self.z_flag:
        self.pc = self.relative()

def beq(self):  # Branch if Equal
    if self.z_flag:
        self.pc = self.relative()

def bra(self):  # Branch Always
    self.pc = self.relative()

# --- Jump-Befehle ---

def jmp_absolute(self):
    self.pc = self.absolute()

def jmp_indirect(self):
    address = self.absolute()
    self.pc = (self.memory[address + 1] << 8) | self.memory[address]

# --- Subroutine-Befehle ---

def jsr(self):
    address = self.absolute()
    self.push_stack((self.pc - 1) >> 8)
    self.push_stack((self.pc - 1) & 0xFF)
    self.pc = address

def rts(self):
    low_byte = self.pop_stack()
    high_byte = self.pop_stack()
    self.pc = (high_byte << 8) | low_byte
    self.pc += 1

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-5)

# --- CMP (Compare with Accumulator) ---

def cmp_immediate(self):
    value = self.memory[self.immediate()]
    self.compare(self.a, value)

def cmp_zero_page(self):
    address = self.zero_page()
    self.compare(self.a, self.memory[address])

def cmp_zero_page_x(self):
    address = self.zero_page_x()
    self.compare(self.a, self.memory[address])

def cmp_absolute(self):
    address = self.absolute()
    self.compare(self.a, self.memory[address])

def cmp_absolute_x(self):
    address = self.absolute_x()
    self.compare(self.a, self.memory[address])

def cmp_absolute_y(self):
    address = self.absolute_y()
    self.compare(self.a, self.memory[address])

def cmp_indirect_x(self):
    address = self.indirect_x()
    self.compare(self.a, self.memory[address])

def cmp_indirect_y(self):
    address = self.indirect_y()
    self.compare(self.a, self.memory[address])

# --- CPX (Compare with X) ---

def cpx_immediate(self):
    value = self.memory[self.immediate()]
    self.compare(self.x, value)

def cpx_zero_page(self):
    address = self.zero_page()
    self.compare(self.x, self.memory[address])

def cpx_absolute(self):
    address = self.absolute()
    self.compare(self.x, self.memory[address])

# --- CPY (Compare with Y) ---

def cpy_immediate(self):
    value = self.memory[self.immediate()]
    self.compare(self.y, value)

def cpy_zero_page(self):
    address = self.zero_page()
    self.compare(self.y, self.memory[address])

def cpy_absolute(self):
    address = self.absolute()
    self.compare(self.y, self.memory[address])

# --- BIT (Test BITs) ---

def bit_zero_page(self):
    address = self.zero_page()
    value = self.memory[address]
    result = self.a & value
    self.set_flag(0x02, result == 0)  # Zero Flag
    self.set_flag(0x80, value & 0x80)  # Negative Flag
    self.set_flag(0x40, value & 0x40)  # Overflow Flag

def bit_absolute(self):
    address = self.absolute()
    value = self.memory[address]
    result = self.a & value
    self.set_flag(0x02, result == 0)
    self.set_flag(0x80, value & 0x80)
    self.set_flag(0x40, value & 0x40)

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-6)

# --- INC (Increment Memory) ---
def inc_zero_page(self):
    address = self.zero_page()
    self.memory[address] = (self.memory[address] + 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def inc_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = (self.memory[address] + 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def inc_absolute(self):
    address = self.absolute()
    self.memory[address] = (self.memory[address] + 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def inc_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = (self.memory[address] + 1) & 0xFF
    self.set_zn_flags(self.memory[address])

# --- INX (Increment X Register) ---
def inx(self):
    self.x = (self.x + 1) & 0xFF
    self.set_zn_flags(self.x)

# --- INY (Increment Y Register) ---
def iny(self):
    self.y = (self.y + 1) & 0xFF
    self.set_zn_flags(self.y)

# --- DEC (Decrement Memory) ---
def dec_zero_page(self):
    address = self.zero_page()
    self.memory[address] = (self.memory[address] - 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def dec_zero_page_x(self):
    address = self.zero_page_x()
    self.memory[address] = (self.memory[address] - 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def dec_absolute(self):
    address = self.absolute()
    self.memory[address] = (self.memory[address] - 1) & 0xFF
    self.set_zn_flags(self.memory[address])

def dec_absolute_x(self):
    address = self.absolute_x()
    self.memory[address] = (self.memory[address] - 1) & 0xFF
    self.set_zn_flags(self.memory[address])

# --- DEX (Decrement X Register) ---
def dex(self):
    self.x = (self.x - 1) & 0xFF
    self.set_zn_flags(self.x)

# --- DEY (Decrement Y Register) ---
def dey(self):
    self.y = (self.y - 1) & 0xFF
    self.set_zn_flags(self.y)

# --- ASL (Arithmetic Shift Left) ---
def asl_accumulator(self):
    self.c_flag = (self.a >> 7) & 1
    self.a = (self.a << 1) & 0xFF
    self.set_zn_flags(self.a)

def asl_zero_page(self):
    address = self.zero_page()
    self.memory[address] = (self.memory[address] << 1) & 0xFF
    self.set_zn_flags(self.memory[address])
    self.c_flag = (self.memory[address] >> 7) & 1

# ... (ASL zero page,X, absolute, absolute,X)

# --- LSR (Logical Shift Right) ---
def lsr_accumulator(self):
    self.c_flag = self.a & 1
    self.a >>= 1
    self.set_zn_flags(self.a)

def lsr_zero_page(self):
    address = self.zero_page()
    self.memory[address] >>= 1
    self.set_zn_flags(self.memory[address])
    self.c_flag = self.memory[address] & 1

# ... (LSR zero page,X, absolute, absolute,X)

# --- ROL (Rotate Left) ---
def rol_accumulator(self):
    old_carry = self.c_flag
    self.c_flag = (self.a >> 7) & 1
    self.a = ((self.a << 1) | old_carry) & 0xFF
    self.set_zn_flags(self.a)

def rol_zero_page(self):
    address = self.zero_page()
    value = self.memory[address]
    old_carry = self.c_flag
    self.c_flag = (value >> 7) & 1
    self.memory[address] = ((value << 1) | old_carry) & 0xFF
    self.set_zn_flags(self.memory[address])

# ... (ROL zero page,X, absolute, absolute,X)

# --- ROR (Rotate Right) ---
def ror_accumulator(self):
    old_carry = self.c_flag
    self.c_flag = self.a & 1
    self.a = (self.a >> 1) | (old_carry << 7)
    self.set_zn_flags(self.a)

def ror_zero_page(self):
    address = self.zero_page()
    value = self.memory[address]
    old_carry = self.c_flag
    self.c_flag = value & 1
    self.memory[address] = (value >> 1) | (old_carry << 7)
    self.set_zn_flags(self.memory[address])

# ... (ROR zero page,X, absolute, absolute,X)

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-7)

# --- Transfer-Befehle zwischen Registern ---

def tax(self):  # Transfer Accumulator to X
    self.x = self.a
    self.set_zn_flags(self.x)

def tay(self):  # Transfer Accumulator to Y
    self.y = self.a
    self.set_zn_flags(self.y)

def txa(self):  # Transfer X to Accumulator
    self.a = self.x
    self.set_zn_flags(self.a)

def tya(self):  # Transfer Y to Accumulator
    self.a = self.y
    self.set_zn_flags(self.a)

def tsx(self):  # Transfer Stack Pointer to X
    self.x = self.s
    self.set_zn_flags(self.x)

def txs(self):  # Transfer X to Stack Pointer
    self.s = self.x
    # TXS setzt keine Flags

# --- Stack-Operationen ---

def pha(self):  # Push Accumulator
    self.push_stack(self.a)

def pla(self):  # Pull Accumulator
    self.a = self.pop_stack()
    self.set_zn_flags(self.a)

def php(self):  # Push Processor Status
    self.push_stack(self.p | 0x10)  # Break Flag und Bit 4 setzen

def plp(self):  # Pull Processor Status
    self.p = self.pop_stack()
    self.p &= ~0x10  # Break Flag l√∂schen
    self.p |= 0x20  # Bit 5 immer setzen

# --- Flag-Befehle ---

def clc(self):  # Clear Carry Flag
    self.set_flag(0x01, False)

def sec(self):  # Set Carry Flag
    self.set_flag(0x01, True)

def cli(self):  # Clear Interrupt Disable
    self.set_flag(0x04, False)

def sei(self):  # Set Interrupt Disable
    self.set_flag(0x04, True)

def clv(self):  # Clear Overflow Flag
    self.set_flag(0x40, False)

def cld(self):  # Clear Decimal Mode
    self.set_flag(0x08, False)

def sed(self):  # Set Decimal Mode
    self.set_flag(0x08, True)

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-7)

# --- Transfer-Befehle zwischen Registern ---

def tax(self):  # Transfer Accumulator to X
    self.x = self.a
    self.set_zn_flags(self.x)

def tay(self):  # Transfer Accumulator to Y
    self.y = self.a
    self.set_zn_flags(self.y)

def txa(self):  # Transfer X to Accumulator
    self.a = self.x
    self.set_zn_flags(self.a)

def tya(self):  # Transfer Y to Accumulator
    self.a = self.y
    self.set_zn_flags(self.a)

def tsx(self):  # Transfer Stack Pointer to X
    self.x = self.s
    self.set_zn_flags(self.x)

def txs(self):  # Transfer X to Stack Pointer
    self.s = self.x
    # TXS setzt keine Flags

# --- Stack-Operationen ---

def pha(self):  # Push Accumulator
    self.push_stack(self.a)

def pla(self):  # Pull Accumulator
    self.a = self.pop_stack()
    self.set_zn_flags(self.a)

def php(self):  # Push Processor Status
    self.push_stack(self.p | 0x10)  # Break Flag und Bit 4 setzen

def plp(self):  # Pull Processor Status
    self.p = self.pop_stack()
    self.p &= ~0x10  # Break Flag l√∂schen
    self.p |= 0x20  # Bit 5 immer setzen

# --- Flag-Befehle ---

def clc(self):  # Clear Carry Flag
    self.set_flag(0x01, False)

def sec(self):  # Set Carry Flag
    self.set_flag(0x01, True)

def cli(self):  # Clear Interrupt Disable
    self.set_flag(0x04, False)

def sei(self):  # Set Interrupt Disable
    self.set_flag(0x04, True)

def clv(self):  # Clear Overflow Flag
    self.set_flag(0x40, False)

def cld(self):  # Clear Decimal Mode
    self.set_flag(0x08, False)

def sed(self):  # Set Decimal Mode
    self.set_flag(0x08, True)

# Inject the functions into the CPU class
# ... (Injection of the functions into the CPU class)
# ... (Opcodes aus Teil 1-7)

        # Ungew√∂hnliche/Illegale Opcodes
        elif opcode == 0xEB:  # SBC (immediate, aber wie 0xE9)
            value = self.memory[self.immediate()] ^ 0xFF  # Komplement f√ºr Subtraktion
            result = self.a + value + self.c_flag
            self.a = result & 0xFF
            self.set_flag(0x01, result > 0xFF)  # Carry Flag
            self.set_flag(0x40, ((self.a ^ value) & 0x80 != 0) and ((self.a ^ result) & 0x80 == 0))  # Overflow Flag
            self.set_zn_flags(self.a)
        elif opcode == 0x0B or opcode == 0x2B:  # ANC (AND #, dann C = N)
            value = self.memory[self.immediate()]
            self.a &= value
            self.set_flag(0x01, self.n_flag)
            self.set_zn_flags(self.a)
        elif opcode == 0x8B:  # XAA (Undokumentiert)
            self.a = ((self.a | 0xEE) & self.x) & self.memory[self.immediate()]
            self.set_zn_flags(self.a)
        elif opcode == 0xAB:  # LAX (immediate)  
            value = self.memory[self.immediate()]
            self.a = value
            self.x = value
            self.set_zn_flags(value)
        elif opcode == 0x9B:  # TAS (Transfer A to Stack pointer, then decrement Stack pointer)
            if not self.emulation_mode:
                self.s = self.a
                self.memory[0x100 + self.s] = self.a & self.x
                self.s -= 1
            else:
                self.s = self.a & 0xFF
                self.memory[0x100 + self.s] = (self.a & self.x) & 0xFF
                self.s -= 1
        elif opcode == 0xBB:  # LAS (Load Accumulator,X, and Stack pointer from memory)
            address = self.absolute_y()
            value = self.memory[address] & self.s
            self.a = value
            self.x = value
            self.s = value
            self.set_zn_flags(value)
        elif opcode == 0x93:  # AHX (absolute,Y)
            address = self.absolute_y() & 0xFFFF
            self.memory[address] = (self.a & self.x) & ((address >> 8) + 1)
        elif opcode == 0x9F:  # AHX (absolute,Y) with wrapping
            address = self.absolute_y()
            self.memory[address & 0xFFFF] = (self.a & self.x) & ((address >> 8) + 1)
        elif opcode == 0x9E:  # SHX (absolute,Y)
            address = self.absolute_y() & 0xFFFF
            self.memory[address] = self.x & ((address >> 8) + 1)
        elif opcode == 0x9B:  # SHY (absolute,X)
            address = self.absolute_x() & 0xFFFF
            self.memory[address] = self.y & ((address >> 8) + 1)

        # Fehlerbehandlung f√ºr nicht implementierte Opcodes
        else:
            raise NotImplementedError(f"Opcode {hex(opcode)} not implemented yet")

        # ... (Zyklen z√§hlen und Interrupts pr√ºfen wie zuvor)

